// Generated by CoffeeScript 1.3.3

/* 
# yamoda.coffee
# root module for YAMODA
# 
# @author dpausp (Tobias Stenzel)
*/


/*-- private module vars --
*/


(function() {
  var add_module_constants, apply_module_constants, before_module_init, get_logger, logg, module_constants, module_initializer, run_before_init, that, ym_logg,
    __hasProp = {}.hasOwnProperty;

  logg = ym_logg = void 0;

  that = this;

  module_initializer = {};

  module_constants = {};

  /*-- module functions --
  */


  get_logger = function(logger_name) {
    var logger;
    logg.debug("getting logger with name " + logger_name);
    logger = log4javascript.getLogger(logger_name);
    ym_logg.addChild(logger);
    return logger;
  };

  add_module_constants = function(module_name, new_constants) {
    var constants, key, value;
    logg.debug("add constants for", module_name, new_constants);
    if (module_constants[module_name] === void 0) {
      constants = module_constants[module_name] = {};
    } else {
      constants = module_constants[module_name];
    }
    for (key in new_constants) {
      if (!__hasProp.call(new_constants, key)) continue;
      value = new_constants[key];
      constants[key] = value;
    }
    if (yamoda[module_name]) {
      yamoda.apply_module_constants(yamoda[module_name]);
      return null;
    }
    return constants;
  };

  apply_module_constants = function(module) {
    var constants, key, value;
    constants = module_constants[module.YM_MODULE_NAME] || {};
    if (constants) {
      logg.debug("applying constants for module", module.YM_MODULE_NAME, constants);
      for (key in constants) {
        if (!__hasProp.call(constants, key)) continue;
        value = constants[key];
        module[key] = value;
      }
      module_constants[module.YM_MODULE_NAME] = {};
    }
    return module;
  };

  before_module_init = function(module_name, func) {
    var handlers;
    if (module_initializer[module_name] === void 0) {
      handlers = module_initializer[module_name] = [];
    } else {
      handlers = module_initializer[module_name];
    }
    return handlers.push(func);
  };

  run_before_init = function(module_name) {
    var f, handlers, _i, _len;
    handlers = module_initializer[module_name] || [];
    for (_i = 0, _len = handlers.length; _i < _len; _i++) {
      f = handlers[_i];
      f();
    }
  };

  /*-- READY --
  */


  $(document).ready(function() {
    var console_appender, console_layout, root_logger, yamoda;
    if (that.yamoda) {
      console.log("yamoda already defined, skipping!");
      return;
    }
    root_logger = log4javascript.getRootLogger();
    ym_logg = log4javascript.getLogger("yamoda");
    console_layout = new log4javascript.PatternLayout("%r: %c| %m{1}%n");
    console_appender = new log4javascript.BrowserConsoleAppender();
    console_appender.setLayout(console_layout);
    root_logger.addChild(ym_logg);
    ym_logg.addAppender(console_appender);
    logg = ym_logg;
    logg.info("yamoda init");
    yamoda = that.yamoda = {
      logg: logg,
      get_logger: get_logger,
      add_module_constants: add_module_constants,
      apply_module_constants: apply_module_constants,
      before_module_init: before_module_init,
      run_before_init: run_before_init
    };
    logg.info("yamoda loaded");
  });

}).call(this);
